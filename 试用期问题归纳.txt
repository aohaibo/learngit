1：	获取上课禁用列表
		URL里watchID不能带双引号，否则报错，而getclassModeIconConfig确需要带双引号，借口参数不规范，应该所有接口都统一
		GET    /classmode/all/"a9dac4c2bb4c4d9f8664682ff9c9155f31294085"
	getclassModeIconConfig
		/classmode/classModeIconConfig/"a9dac4c2bb4c4d9f8664682ff9c9155f31294085"
		
2： 增加上课禁用接口，为什么所有参数都是非必填的？假如不带上watchID或者说mobileID，不会报错？
		
4： 接口URL命名最好是统一规则，如下接口，添加和修改URL分别有add/和update，删除和查询最好也要有delete和Qurrey
	POST /classmode/add 添加上课禁用
	PUT /classmode/update 修改上课禁用
	DELETE /classmode/{classId} 删除上课禁用
	GET /classmode/{watchId} 获取手表上课禁用时间
	
4：服务器性能测试过程中，好像对软件可靠性不太关注，例如模块故障，重启，主备倒换，内存泄漏，CPU过高，网络延时、丢包、抖动、错包等异常场景，并且，性能测试各模型太独	 立了，最好能有交叉业务（交叉业务在条件允许的情况下，最好能有长期稳定性测试）

5：版本发布前，性能应该启动一轮SIT，将所有性能场景覆盖一遍（可靠性场景意义不大），并且主要测交叉业务

6：需求开发及设计时，性能测试最好能在前期即参与其中，在设计阶段就应该考虑性能问题，例如表索引、业务流控值、业务实现流程确认，这些问题应该在设计阶段就澄清

7：不只是测试报告和测试设计需要评审，测试用例我觉得应该也是一个需要评审的点，实际测试过程中，都是以用例为指导的，所以，用例最好能评审

8：性能调优及问题定位复现，测试主要辅助就OK，最好将性能测试技巧传递给开发，如果出问题，开发出包后可以自验，测试在其中主要担任回归的角色

9：http请求中，消息中的token是假的，实际上服务器对请求并未进行鉴权，假如出现服务器攻击行为，会影响服务器的正常运行